"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdfSerializer = void 0;
const core_1 = require("@comunica/core");
const stream_1 = require("stream");
/**
 * An RdfSerializer can serialize to any RDF serialization, based on a given content type.
 */
class RdfSerializer {
    constructor(args) {
        this.mediatorRdfSerializeMediatypes = args.mediatorRdfSerializeMediatypes;
        this.mediatorRdfSerializeHandle = args.mediatorRdfSerializeHandle;
    }
    /**
     * Get an array of all available content types for this serializer.
     * @return {Promise<string[]>} A promise resolving to a string array of all content types.
     */
    getContentTypes() {
        return __awaiter(this, void 0, void 0, function* () {
            return Object.keys(yield this.getContentTypesPrioritized());
        });
    }
    /**
     * Get a hash of all available content types for this serializer, mapped to a numerical priority.
     * @return {Promise<{[p: string]: number}>} A promise resolving to a hash mapping content type to a priority number.
     */
    getContentTypesPrioritized() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.mediatorRdfSerializeMediatypes.mediate({ context: core_1.ActionContext({}), mediaTypes: true })).mediaTypes;
        });
    }
    /**
     * Serialize the given stream.
     * @param {NodeJS.ReadableStream} stream A string stream.
     * @param {ISerializeOptions} options Serialization options.
     * @return {Stream} An RDFJS quad stream.
     */
    serialize(stream, options) {
        let contentType;
        if ('contentType' in options && options.contentType) {
            contentType = options.contentType;
        }
        else if ('path' in options && options.path) {
            contentType = this.getContentTypeFromExtension(options.path);
            if (!contentType) {
                throw new Error(`No valid extension could be detected from the given 'path' option: '${options.path}'`);
            }
        }
        else {
            throw new Error(`Missing 'contentType' or 'path' option while serializing.`);
        }
        // Create a new readable
        const readable = new stream_1.Readable();
        readable._read = () => {
            return;
        };
        // Delegate serializing to the mediator
        this.mediatorRdfSerializeHandle.mediate({
            context: core_1.ActionContext(options),
            handle: { quadStream: stream },
            handleMediaType: contentType,
        })
            .then((output) => {
            const data = output.handle.data;
            data.on('error', (e) => readable.emit('error', e));
            data.on('data', (chunk) => readable.push(chunk));
            data.on('end', () => readable.push(null));
        })
            .catch((e) => readable.emit('error', e));
        return readable;
    }
    /**
     * Get the content type based on the extension of the given path,
     * which can be an URL or file path.
     * @param {string} path A path.
     * @return {string} A content type or the empty string.
     */
    getContentTypeFromExtension(path) {
        const dotIndex = path.lastIndexOf('.');
        if (dotIndex >= 0) {
            const ext = path.substr(dotIndex);
            // ignore dot
            return RdfSerializer.CONTENT_MAPPINGS[ext.substring(1)] || '';
        }
        return '';
    }
}
exports.RdfSerializer = RdfSerializer;
// tslint:disable:object-literal-sort-keys
RdfSerializer.CONTENT_MAPPINGS = {
    ttl: "text/turtle",
    turtle: "text/turtle",
    nt: "application/n-triples",
    ntriples: "application/n-triples",
    nq: "application/n-quads",
    nquads: "application/n-quads",
    n3: "text/n3",
    trig: "application/trig",
    jsonld: "application/ld+json",
    json: "application/ld+json",
};
//# sourceMappingURL=RdfSerializer.js.map