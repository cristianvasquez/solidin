import { RuntimeConfig } from '../init/RuntimeConfig';
import { Representation } from '../ldp/representation/Representation';
import { ResourceIdentifier } from '../ldp/representation/ResourceIdentifier';
import { InteractionController } from '../util/InteractionController';
import { MetadataController } from '../util/MetadataController';
import { ResourceStore } from './ResourceStore';
/**
 * Resource store storing its data in the file system backend.
 * All requests will throw an {@link NotFoundHttpError} if unknown identifiers get passed.
 */
export declare class FileResourceStore implements ResourceStore {
    private readonly runtimeConfig;
    private readonly interactionController;
    private readonly metadataController;
    /**
     * @param runtimeConfig - The runtime config.
     * @param interactionController - Instance of InteractionController to use.
     * @param metadataController - Instance of MetadataController to use.
     */
    constructor(runtimeConfig: RuntimeConfig, interactionController: InteractionController, metadataController: MetadataController);
    get baseRequestURI(): string;
    get rootFilepath(): string;
    /**
     * Store the incoming data as a file under a file path corresponding to `container.path`,
     * where slashes correspond to subdirectories.
     * @param container - The identifier to store the new data under.
     * @param representation - Data to store. Only File streams are supported.
     *
     * @returns The newly generated identifier.
     */
    addResource(container: ResourceIdentifier, representation: Representation): Promise<ResourceIdentifier>;
    /**
     * Deletes the given resource.
     * @param identifier - Identifier of resource to delete.
     */
    deleteResource(identifier: ResourceIdentifier): Promise<void>;
    /**
     * Returns the stored representation for the given identifier.
     * No preferences are supported.
     * @param identifier - Identifier to retrieve.
     *
     * @returns The corresponding Representation.
     */
    getRepresentation(identifier: ResourceIdentifier): Promise<Representation>;
    /**
     * @throws Not supported.
     */
    modifyResource(): Promise<void>;
    /**
     * Replaces the stored Representation with the new one for the given identifier.
     * @param identifier - Identifier to replace.
     * @param representation - New Representation.
     */
    setRepresentation(identifier: ResourceIdentifier, representation: Representation): Promise<void>;
    /**
     * Strips the baseRequestURI from the identifier and checks if the stripped base URI matches the store's one.
     * @param identifier - Incoming identifier.
     *
     * @throws {@link NotFoundHttpError}
     * If the identifier does not match the baseRequestURI path of the store.
     */
    private parseIdentifier;
    /**
     * Strips the rootFilepath path from the filepath and adds the baseRequestURI in front of it.
     * @param path - The filepath.
     *
     * @throws {@Link Error}
     * If the filepath does not match the rootFilepath path of the store.
     */
    private mapFilepathToUrl;
    /**
     * Helper function to delete a file and its corresponding metadata file if such exists.
     * @param path - The path to the file.
     */
    private deleteFile;
    /**
     * Helper function to delete a directory and its corresponding metadata file if such exists.
     * @param path - The path to the directory.
     */
    private deleteDirectory;
    /**
     * Helper function to get the representation of a file in the file system.
     * It loads the quads from the corresponding metadata file if it exists.
     * @param path - The path to the file.
     * @param stats - The Stats of the file.
     *
     * @returns The corresponding Representation.
     */
    private getFileRepresentation;
    /**
     * Helper function to get the representation of a directory in the file system.
     * It loads the quads from the corresponding metadata file if it exists
     * and generates quad representations for all its children.
     *
     * @param path - The path to the directory.
     * @param stats - The Stats of the directory.
     *
     * @returns The corresponding Representation.
     */
    private getDirectoryRepresentation;
    /**
     * Helper function to get quad representations for all children in a directory.
     * @param files - List of all children in the directory.
     * @param path - The path to the directory.
     * @param containerURI - The URI of the directory.
     *
     * @returns A promise containing all quads.
     */
    private getDirChildrenQuadRepresentation;
    /**
     * Helper function to (re)write file for the resource if no container with that identifier exists.
     * @param path - The path to the directory of the file.
     * @param newIdentifier - The name of the file to be created or overwritten.
     * @param data - The data to be put in the file.
     * @param metadata - Optional metadata.
     */
    private setFileRepresentation;
    /**
     * Helper function to create a container if the identifier doesn't exist yet.
     * @param path - The path to the parent directory in which the new directory should be created.
     * @param newIdentifier - The name of the directory to be created.
     * @param metadata - Optional metadata.
     */
    private setDirectoryRepresentation;
    /**
     * Create a file to represent a resource.
     * @param path - The path to the directory in which the file should be created.
     * @param resourceName - The name of the file to be created.
     * @param data - The data to be put in the file.
     * @param allowRecursiveCreation - Whether necessary but not existing intermediate containers may be created.
     * @param metadata - Optional metadata that will be stored at `path/resourceName.metadata` if set.
     *
     * @returns Promise of the identifier of the newly created resource.
     */
    private createFile;
    /**
     * Create a directory to represent a container.
     * @param path - The path to the parent directory in which the new directory should be created.
     * @param containerName - The name of the directory to be created.
     * @param allowRecursiveCreation - Whether necessary but not existing intermediate containers may be created.
     * @param metadata - Optional metadata that will be stored at `path/containerName/.metadata` if set.
     *
     * @returns Promise of the identifier of the newly created container.
     */
    private createContainer;
    /**
     * Helper function without extra validation checking to create a data file.
     * @param path - The filepath of the file to be created.
     * @param data - The data to be put in the file.
     */
    private createDataFile;
}
