/// <reference types="node" />
import { Readable } from 'stream';
import { Patch } from '../ldp/http/Patch';
import { Representation } from '../ldp/representation/Representation';
import { RepresentationPreferences } from '../ldp/representation/RepresentationPreferences';
import { ResourceIdentifier } from '../ldp/representation/ResourceIdentifier';
import { AtomicResourceStore } from './AtomicResourceStore';
import { Conditions } from './Conditions';
import { ResourceLocker } from './ResourceLocker';
import { ResourceStore } from './ResourceStore';
/**
 * Store that for every call acquires a lock before executing it on the requested resource,
 * and releases it afterwards.
 */
export declare class LockingResourceStore implements AtomicResourceStore {
    private readonly source;
    private readonly locks;
    constructor(source: ResourceStore, locks: ResourceLocker);
    getRepresentation(identifier: ResourceIdentifier, preferences: RepresentationPreferences, conditions?: Conditions): Promise<Representation>;
    addResource(container: ResourceIdentifier, representation: Representation, conditions?: Conditions): Promise<ResourceIdentifier>;
    setRepresentation(identifier: ResourceIdentifier, representation: Representation, conditions?: Conditions): Promise<void>;
    deleteResource(identifier: ResourceIdentifier, conditions?: Conditions): Promise<void>;
    modifyResource(identifier: ResourceIdentifier, patch: Patch, conditions?: Conditions): Promise<void>;
    /**
     * Acquires a lock for the identifier and releases it when the function is executed.
     * @param identifier - Identifier that should be locked.
     * @param func - Function to be executed.
     */
    protected lockedRun<T>(identifier: ResourceIdentifier, func: () => Promise<T>): Promise<T>;
    /**
     * Acquires a lock for the identifier that should return a representation with Readable data and releases it when the
     * Readable is read, closed or results in an error.
     * When using this function, it is required to close the Readable stream when you are ready.
     *
     * @param identifier - Identifier that should be locked.
     * @param func - Function to be executed.
     */
    protected lockedRepresentationRun(identifier: ResourceIdentifier, func: () => Promise<Representation>): Promise<Representation>;
    /**
     * Wraps a representation to make it time out when nothing is read for a certain amount of time.
     *
     * @param source - The representation to wrap
     */
    protected createExpiringRepresentation(source: Representation): Representation;
    /**
     * Wraps a readable to make it time out when nothing is read for a certain amount of time.
     *
     * @param source - The readable to wrap
     */
    protected createExpiringReadable(source: Readable): Readable;
}
