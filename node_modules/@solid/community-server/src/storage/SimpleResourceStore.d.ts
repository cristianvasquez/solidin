import { RuntimeConfig } from '../init/RuntimeConfig';
import { Representation } from '../ldp/representation/Representation';
import { ResourceIdentifier } from '../ldp/representation/ResourceIdentifier';
import { ResourceStore } from './ResourceStore';
/**
 * Resource store storing its data in an in-memory map.
 * All requests will throw an {@link NotFoundHttpError} if unknown identifiers get passed.
 */
export declare class SimpleResourceStore implements ResourceStore {
    private readonly store;
    private readonly runtimeConfig;
    private index;
    /**
     * @param runtimeConfig - Config containing base that will be stripped of all incoming URIs
     *                        and added to all outgoing ones to find the relative path.
     */
    constructor(runtimeConfig: RuntimeConfig);
    /**
     * Stores the incoming data under a new URL corresponding to `container.path + number`.
     * Slash added when needed.
     * @param container - The identifier to store the new data under.
     * @param representation - Data to store.
     *
     * @returns The newly generated identifier.
     */
    addResource(container: ResourceIdentifier, representation: Representation): Promise<ResourceIdentifier>;
    /**
     * Deletes the given resource.
     * @param identifier - Identifier of resource to delete.
     */
    deleteResource(identifier: ResourceIdentifier): Promise<void>;
    /**
     * Returns the stored representation for the given identifier.
     * Preferences will be ignored, data will be returned as it was received.
     *
     * @param identifier - Identifier to retrieve.
     *
     * @returns The corresponding Representation.
     */
    getRepresentation(identifier: ResourceIdentifier): Promise<Representation>;
    /**
     * @throws Not supported.
     */
    modifyResource(): Promise<void>;
    /**
     * Puts the given data in the given location.
     * @param identifier - Identifier to replace.
     * @param representation - New Representation.
     */
    setRepresentation(identifier: ResourceIdentifier, representation: Representation): Promise<void>;
    /**
     * Strips the base from the identifier and checks if it is valid.
     * @param identifier - Incoming identifier.
     *
     * @throws {@link NotFoundHttpError}
     * If the identifier doesn't start with the base ID.
     *
     * @returns A string representing the relative path.
     */
    private parseIdentifier;
    /**
     * Checks if the relative path is in the store.
     * @param identifier - Incoming identifier.
     *
     * @throws {@link NotFoundHttpError}
     * If the path is not in the store.
     */
    private checkPath;
    /**
     * Copies the Representation by draining the original data stream and creating a new one.
     *
     * @param data - Incoming Representation.
     */
    private copyRepresentation;
    /**
     * Generates a Representation that is identical to the one stored,
     * but makes sure to duplicate the data stream so it stays readable for later calls.
     *
     * @param path - Path in store of Representation.
     *
     * @returns The resulting Representation.
     */
    private generateRepresentation;
}
