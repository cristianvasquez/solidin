"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuadToRdfConverter = void 0;
const rdf_serialize_1 = __importDefault(require("rdf-serialize"));
const ContentTypes_1 = require("../../util/ContentTypes");
const ConversionUtil_1 = require("./ConversionUtil");
const TypedRepresentationConverter_1 = require("./TypedRepresentationConverter");
/**
 * Converts `internal/quads` to most major RDF serializations.
 */
class QuadToRdfConverter extends TypedRepresentationConverter_1.TypedRepresentationConverter {
    async getInputTypes() {
        return { [ContentTypes_1.INTERNAL_QUADS]: 1 };
    }
    async getOutputTypes() {
        return rdf_serialize_1.default.getContentTypesPrioritized();
    }
    async canHandle(input) {
        ConversionUtil_1.checkRequest(input, [ContentTypes_1.INTERNAL_QUADS], await rdf_serialize_1.default.getContentTypes());
    }
    async handle(input) {
        return this.quadsToRdf(input.representation, input.preferences);
    }
    async quadsToRdf(quads, preferences) {
        const contentType = ConversionUtil_1.matchingTypes(preferences, await rdf_serialize_1.default.getContentTypes())[0].value;
        const metadata = Object.assign(Object.assign({}, quads.metadata), { contentType });
        return {
            binary: true,
            data: rdf_serialize_1.default.serialize(quads.data, { contentType }),
            metadata,
        };
    }
}
exports.QuadToRdfConverter = QuadToRdfConverter;
//# sourceMappingURL=QuadToRdfConverter.js.map