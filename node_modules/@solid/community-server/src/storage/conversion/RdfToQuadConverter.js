"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdfToQuadConverter = void 0;
const stream_1 = require("stream");
const rdf_parse_1 = __importDefault(require("rdf-parse"));
const ContentTypes_1 = require("../../util/ContentTypes");
const UnsupportedHttpError_1 = require("../../util/errors/UnsupportedHttpError");
const ConversionUtil_1 = require("./ConversionUtil");
const TypedRepresentationConverter_1 = require("./TypedRepresentationConverter");
/**
 * Converts most major RDF serializations to `internal/quads`.
 */
class RdfToQuadConverter extends TypedRepresentationConverter_1.TypedRepresentationConverter {
    async getInputTypes() {
        return rdf_parse_1.default.getContentTypesPrioritized();
    }
    async getOutputTypes() {
        return { [ContentTypes_1.INTERNAL_QUADS]: 1 };
    }
    async canHandle(input) {
        ConversionUtil_1.checkRequest(input, await rdf_parse_1.default.getContentTypes(), [ContentTypes_1.INTERNAL_QUADS]);
    }
    async handle(input) {
        return this.rdfToQuads(input.representation, input.identifier.path);
    }
    rdfToQuads(representation, baseIRI) {
        const metadata = Object.assign(Object.assign({}, representation.metadata), { contentType: ContentTypes_1.INTERNAL_QUADS });
        // Catch parsing errors and emit correct error
        // Node 10 requires both writableObjectMode and readableObjectMode
        const errorStream = new stream_1.PassThrough({ writableObjectMode: true, readableObjectMode: true });
        const data = rdf_parse_1.default.parse(representation.data, {
            contentType: representation.metadata.contentType,
            baseIRI,
        });
        data.pipe(errorStream);
        data.on('error', (error) => errorStream.emit('error', new UnsupportedHttpError_1.UnsupportedHttpError(error.message)));
        return {
            binary: false,
            data: errorStream,
            metadata,
        };
    }
}
exports.RdfToQuadConverter = RdfToQuadConverter;
//# sourceMappingURL=RdfToQuadConverter.js.map