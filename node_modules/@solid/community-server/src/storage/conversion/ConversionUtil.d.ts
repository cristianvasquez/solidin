import { RepresentationPreference } from '../../ldp/representation/RepresentationPreference';
import { RepresentationPreferences } from '../../ldp/representation/RepresentationPreferences';
import { RepresentationConverterArgs } from './RepresentationConverter';
/**
 * Filters out the media types from the preferred types that correspond to one of the supported types.
 * @param preferences - Preferences for output type.
 * @param supported - Types supported by the parser.
 *
 * @throws UnsupportedHttpError
 * If the type preferences are undefined.
 *
 * @returns The filtered list of preferences.
 */
export declare const matchingTypes: (preferences: RepresentationPreferences, supported: string[]) => RepresentationPreference[];
/**
 * Runs some standard checks on the input request:
 *  - Checks if there is a content type for the input.
 *  - Checks if the input type is supported by the parser.
 *  - Checks if the parser can produce one of the preferred output types.
 * @param request - Incoming arguments.
 * @param supportedIn - Media types that can be parsed by the converter.
 * @param supportedOut - Media types that can be produced by the converter.
 */
export declare const checkRequest: (request: RepresentationConverterArgs, supportedIn: string[], supportedOut: string[]) => void;
