"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkRequest = exports.matchingTypes = void 0;
const UnsupportedHttpError_1 = require("../../util/errors/UnsupportedHttpError");
const Util_1 = require("../../util/Util");
/**
 * Filters out the media types from the preferred types that correspond to one of the supported types.
 * @param preferences - Preferences for output type.
 * @param supported - Types supported by the parser.
 *
 * @throws UnsupportedHttpError
 * If the type preferences are undefined.
 *
 * @returns The filtered list of preferences.
 */
exports.matchingTypes = (preferences, supported) => {
    if (!Array.isArray(preferences.type)) {
        throw new UnsupportedHttpError_1.UnsupportedHttpError('Output type required for conversion.');
    }
    return preferences.type.filter(({ value, weight }) => weight > 0 &&
        supported.some((type) => Util_1.matchingMediaType(value, type)));
};
/**
 * Runs some standard checks on the input request:
 *  - Checks if there is a content type for the input.
 *  - Checks if the input type is supported by the parser.
 *  - Checks if the parser can produce one of the preferred output types.
 * @param request - Incoming arguments.
 * @param supportedIn - Media types that can be parsed by the converter.
 * @param supportedOut - Media types that can be produced by the converter.
 */
exports.checkRequest = (request, supportedIn, supportedOut) => {
    const inType = request.representation.metadata.contentType;
    if (!inType) {
        throw new UnsupportedHttpError_1.UnsupportedHttpError('Input type required for conversion.');
    }
    if (!supportedIn.some((type) => Util_1.matchingMediaType(inType, type))) {
        throw new UnsupportedHttpError_1.UnsupportedHttpError(`Can only convert from ${supportedIn} to ${supportedOut}.`);
    }
    if (exports.matchingTypes(request.preferences, supportedOut).length <= 0) {
        throw new UnsupportedHttpError_1.UnsupportedHttpError(`Can only convert from ${supportedIn} to ${supportedOut}.`);
    }
};
//# sourceMappingURL=ConversionUtil.js.map