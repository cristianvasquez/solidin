"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasePermissionsExtractor = void 0;
const UnsupportedHttpError_1 = require("../../util/errors/UnsupportedHttpError");
const PermissionsExtractor_1 = require("./PermissionsExtractor");
/**
 * Generates permissions for the base set of methods that always require the same permissions.
 * Specifically: GET, HEAD, POST, PUT and DELETE.
 */
class BasePermissionsExtractor extends PermissionsExtractor_1.PermissionsExtractor {
    async canHandle(input) {
        if (!/^(?:HEAD|GET|POST|PUT|DELETE)$/u.test(input.method)) {
            throw new UnsupportedHttpError_1.UnsupportedHttpError(`Unsupported method: ${input.method}`);
        }
    }
    async handle(input) {
        const requiredPermissions = {
            read: /^(?:HEAD|GET)$/u.test(input.method),
            append: false,
            write: /^(?:POST|PUT|DELETE)$/u.test(input.method),
        };
        const read = /^(?:HEAD|GET)$/u.test(input.method);
        const write = /^(?:POST|PUT|DELETE)$/u.test(input.method);
        // Since `append` is a specific type of write, it is true if `write` is true.
        const append = requiredPermissions.write;
        return { read, append, write };
    }
}
exports.BasePermissionsExtractor = BasePermissionsExtractor;
//# sourceMappingURL=BasePermissionsExtractor.js.map