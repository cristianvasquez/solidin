"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicResponseWriter = void 0;
const HttpError_1 = require("../../util/errors/HttpError");
const UnsupportedHttpError_1 = require("../../util/errors/UnsupportedHttpError");
const ResponseWriter_1 = require("./ResponseWriter");
/**
 * Writes to an {@link HttpResponse} based on the incoming {@link ResponseDescription} or error.
 * Still needs a way to write correct status codes for successful operations.
 */
class BasicResponseWriter extends ResponseWriter_1.ResponseWriter {
    async canHandle(input) {
        if (!(input.result instanceof Error)) {
            if (input.result.body && !input.result.body.binary) {
                throw new UnsupportedHttpError_1.UnsupportedHttpError('Only binary results are supported.');
            }
        }
    }
    async handle(input) {
        var _a;
        if (input.result instanceof Error) {
            let code = 500;
            if (input.result instanceof HttpError_1.HttpError) {
                code = input.result.statusCode;
            }
            input.response.setHeader('content-type', 'text/plain');
            input.response.writeHead(code);
            input.response.end(`${input.result.name}: ${input.result.message}\n${input.result.stack}`);
        }
        else {
            input.response.setHeader('location', input.result.identifier.path);
            if (input.result.body) {
                const contentType = (_a = input.result.body.metadata.contentType) !== null && _a !== void 0 ? _a : 'text/plain';
                input.response.setHeader('content-type', contentType);
                input.result.body.data.pipe(input.response);
            }
            input.response.writeHead(200);
            if (!input.result.body) {
                // If there is an input body the response will end once the input stream ends
                input.response.end();
            }
        }
    }
}
exports.BasicResponseWriter = BasicResponseWriter;
//# sourceMappingURL=BasicResponseWriter.js.map