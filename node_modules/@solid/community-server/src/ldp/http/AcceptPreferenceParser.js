"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AcceptPreferenceParser = void 0;
const AcceptParser_1 = require("../../util/AcceptParser");
const PreferenceParser_1 = require("./PreferenceParser");
/**
 * Extracts preferences from the accept-* headers from an incoming {@link HttpRequest}.
 * Supports Accept, Accept-Charset, Accept-Encoding, Accept-Language and Accept-DateTime.
 */
class AcceptPreferenceParser extends PreferenceParser_1.PreferenceParser {
    constructor() {
        super();
    }
    async canHandle() {
        // Supports all HttpRequests
    }
    async handle(input) {
        const result = {};
        const headers = {
            type: { val: input.headers.accept, func: AcceptParser_1.parseAccept },
            charset: { val: input.headers['accept-charset'], func: AcceptParser_1.parseAcceptCharset },
            encoding: { val: input.headers['accept-encoding'], func: AcceptParser_1.parseAcceptEncoding },
            language: { val: input.headers['accept-language'], func: AcceptParser_1.parseAcceptLanguage },
        };
        Object.keys(headers).forEach((key) => {
            const preferences = this.parseHeader(headers[key].func, headers[key].val);
            if (preferences.length > 0) {
                result[key] = preferences;
            }
        });
        // Accept-DateTime is currently specified to simply have a datetime as value
        if (input.headers['accept-datetime']) {
            result.datetime = [{ value: input.headers['accept-datetime'], weight: 1 }];
        }
        return result;
    }
    /**
     * Converts a header string using the given parse function to {@link RepresentationPreference}[].
     * @param input - Input header string.
     * @param parseFunction - Function that converts header string to {@link AcceptHeader}.
     *
     * @returns A list of {@link RepresentationPreference}. Returns an empty list if input was not defined.
     */
    parseHeader(parseFunction, input) {
        if (!input) {
            return [];
        }
        return parseFunction(input).map((accept) => ({ value: accept.range, weight: accept.weight }));
    }
}
exports.AcceptPreferenceParser = AcceptPreferenceParser;
//# sourceMappingURL=AcceptPreferenceParser.js.map