"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticatedLdpHandler = void 0;
const HttpHandler_1 = require("../server/HttpHandler");
/**
 * The central manager that connects all the necessary handlers to go from an incoming request to an executed operation.
 */
class AuthenticatedLdpHandler extends HttpHandler_1.HttpHandler {
    /**
     * Creates the handler.
     * @param args - The handlers required. None of them are optional.
     */
    constructor(args) {
        super();
        Object.assign(this, args);
    }
    /**
     * Checks if the incoming request can be handled. The check is very non-restrictive and will usually be true.
     * It is based on whether the incoming request can be parsed to an operation.
     * @param input - Incoming request and response. Only the request will be used.
     *
     * @returns A promise resolving if this request can be handled, otherwise rejecting with an Error.
     */
    async canHandle(input) {
        return this.requestParser.canHandle(input.request);
    }
    /**
     * Handles the incoming request and writes out the response.
     * This includes the following steps:
     *  - Parsing the request to an Operation.
     *  - Extracting credentials from the request.
     *  - Extracting the required permissions.
     *  - Validating if this operation is allowed.
     *  - Executing the operation.
     *  - Writing out the response.
     * @param input - The incoming request and response object to write to.
     *
     * @returns A promise resolving when the handling is finished.
     */
    async handle(input) {
        let writeData;
        try {
            writeData = { response: input.response, result: await this.runHandlers(input.request) };
        }
        catch (error) {
            writeData = { response: input.response, result: error };
        }
        await this.responseWriter.handleSafe(writeData);
    }
    /**
     * Runs all handlers except writing the output to the response.
     * This because any errors thrown here have an impact on the response.
     * @param request - Incoming request.
     *
     * @returns A promise resolving to the generated Operation.
     */
    async runHandlers(request) {
        const op = await this.requestParser.handleSafe(request);
        const credentials = await this.credentialsExtractor.handleSafe(request);
        const permissions = await this.permissionsExtractor.handleSafe(op);
        await this.authorizer.handleSafe({ credentials, identifier: op.target, permissions });
        return this.operationHandler.handleSafe(op);
    }
}
exports.AuthenticatedLdpHandler = AuthenticatedLdpHandler;
//# sourceMappingURL=AuthenticatedLdpHandler.js.map