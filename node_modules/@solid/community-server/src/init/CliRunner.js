"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCli = exports.runCustom = void 0;
const Path = __importStar(require("path"));
const componentsjs_1 = require("componentsjs");
const yargs_1 = __importDefault(require("yargs"));
/**
 * Generic run function for starting the server from a given config
 * @param args - Command line arguments.
 * @param stdin - Standard input stream.
 * @param stdout - Standard output stream.
 * @param stderr - Standard error stream.
 * @param properties - Components loader properties.
 */
exports.runCustom = function (args, stdin, stdout, stderr, properties) {
    const { argv } = yargs_1.default
        .usage('node ./bin/server.js [args]')
        .options({
        port: { type: 'number', alias: 'p' },
        config: { type: 'string', alias: 'c' },
    })
        .help();
    new Promise(async (resolve) => {
        // Load provided or default config file
        const configPath = argv.config ?
            Path.join(process.cwd(), argv.config) :
            `${__dirname}/../../config/config-default.json`;
        // Setup from config file
        const loader = new componentsjs_1.Loader(properties);
        await loader.registerAvailableModuleResources();
        const setup = await loader
            .instantiateFromUrl('urn:solid-server:default', configPath);
        resolve(await setup.setup({ port: argv.port }));
    }).then((runtimeConfig) => {
        stdout.write(`Running at ${runtimeConfig.base}\n`);
    }).catch((error) => {
        stderr.write(`${error}\n`);
    });
};
/**
 * Run function for starting the server from the command line
 * @param moduleRootPath - Path to the module's root.
 */
exports.runCli = function (moduleRootPath) {
    const argv = process.argv.slice(2);
    exports.runCustom(argv, process.stdin, process.stdout, process.stderr, { mainModulePath: moduleRootPath });
};
//# sourceMappingURL=CliRunner.js.map