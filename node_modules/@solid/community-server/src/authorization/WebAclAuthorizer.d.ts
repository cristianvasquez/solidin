import { ContainerManager } from '../storage/ContainerManager';
import { ResourceStore } from '../storage/ResourceStore';
import { AclManager } from './AclManager';
import { Authorizer, AuthorizerArgs } from './Authorizer';
/**
 * Handles most web access control predicates such as
 * `acl:mode`, `acl:agentClass`, `acl:agent`, `acl:default` and `acl:accessTo`.
 * Does not support `acl:agentGroup`, `acl:origin` and `acl:trustedApp` yet.
 */
export declare class WebAclAuthorizer extends Authorizer {
    private readonly aclManager;
    private readonly containerManager;
    private readonly resourceStore;
    constructor(aclManager: AclManager, containerManager: ContainerManager, resourceStore: ResourceStore);
    canHandle(): Promise<void>;
    /**
     * Checks if an agent is allowed to execute the requested actions.
     * Will throw an error if this is not the case.
     * @param input - Relevant data needed to check if access can be granted.
     */
    handle(input: AuthorizerArgs): Promise<void>;
    /**
     * Checks if any of the triples in the store grant the agent permission to use the given mode.
     * Throws a {@link ForbiddenHttpError} or {@link UnauthorizedHttpError} depending on the credentials
     * if access is not allowed.
     * @param agent - Agent that wants access.
     * @param store - A store containing the relevant triples for authorization.
     * @param mode - Which mode is requested. Probable one of ('write' | 'read' | 'append' | 'control').
     */
    private checkPermission;
    /**
     * Capitalizes the input string.
     * @param mode - String to transform.
     *
     * @returns The capitalized string.
     */
    private capitalize;
    /**
     * Checks if the given agent has access to the modes specified by the given authorization.
     * @param agent - Credentials of agent that needs access.
     * @param auth - acl:Authorization that needs to be checked.
     * @param store - A store containing the relevant triples of the authorization.
     *
     * @returns If the agent has access.
     */
    private hasAccess;
    /**
     * Returns the acl triples that are relevant for the given identifier.
     * These can either be from a corresponding acl file or an acl file higher up with defaults.
     * Rethrows any non-NotFoundHttpErrors thrown by the AclManager or ResourceStore.
     * @param id - ResourceIdentifier of which we need the acl triples.
     * @param recurse - Only used internally for recursion.
     *
     * @returns A store containing the relevant acl triples.
     */
    private getAclRecursive;
    /**
     * Finds all triples in the data stream of the given representation that use the given predicate and object.
     * Then extracts the unique subjects from those triples,
     * and returns a Store containing all triples from the data stream that have such a subject.
     *
     * This can be useful for finding the `acl:Authorization` objects corresponding to a specific URI
     * and returning all relevant information on them.
     * @param data - Representation with data stream of internal/quads.
     * @param predicate - Predicate to match.
     * @param object - Object to match.
     *
     * @returns A store containing the relevant triples.
     */
    private filterData;
}
