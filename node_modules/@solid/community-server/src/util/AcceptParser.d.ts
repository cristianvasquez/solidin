/**
 * General interface for all Accept* headers.
 */
export interface AcceptHeader {
    /** Requested range. Can be a specific value or `*`, matching all. */
    range: string;
    /** Weight of the preference [0, 1]. */
    weight: number;
}
/**
 * Contents of an HTTP Accept header.
 * Range is type/subtype. Both can be `*`.
 */
export interface Accept extends AcceptHeader {
    parameters: {
        /** Media type parameters. These are the parameters that came before the q value. */
        mediaType: {
            [key: string]: string;
        };
        /**
         * Extension parameters. These are the parameters that came after the q value.
         * Value will be an empty string if there was none.
         */
        extension: {
            [key: string]: string;
        };
    };
}
/**
 * Contents of an HTTP Accept-Charset header.
 */
export interface AcceptCharset extends AcceptHeader {
}
/**
 * Contents of an HTTP Accept-Encoding header.
 */
export interface AcceptEncoding extends AcceptHeader {
}
/**
 * Contents of an HTTP Accept-Language header.
 */
export interface AcceptLanguage extends AcceptHeader {
}
/**
 * Parses an Accept header string.
 *
 * @param input - The Accept header string.
 *
 * @throws {@link UnsupportedHttpError}
 * Thrown on invalid header syntax.
 *
 * @returns An array of {@link Accept} objects, sorted by weight.
 */
export declare const parseAccept: (input: string) => Accept[];
/**
 * Parses an Accept-Charset header string.
 *
 * @param input - The Accept-Charset header string.
 *
 * @throws {@link UnsupportedHttpError}
 * Thrown on invalid header syntax.
 *
 * @returns An array of {@link AcceptCharset} objects, sorted by weight.
 */
export declare const parseAcceptCharset: (input: string) => AcceptCharset[];
/**
 * Parses an Accept-Encoding header string.
 *
 * @param input - The Accept-Encoding header string.
 *
 * @throws {@link UnsupportedHttpError}
 * Thrown on invalid header syntax.
 *
 * @returns An array of {@link AcceptEncoding} objects, sorted by weight.
 */
export declare const parseAcceptEncoding: (input: string) => AcceptEncoding[];
/**
 * Parses an Accept-Language header string.
 *
 * @param input - The Accept-Language header string.
 *
 * @throws {@link UnsupportedHttpError}
 * Thrown on invalid header syntax.
 *
 * @returns An array of {@link AcceptLanguage} objects, sorted by weight.
 */
export declare const parseAcceptLanguage: (input: string) => AcceptLanguage[];
