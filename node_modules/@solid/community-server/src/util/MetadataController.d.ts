/// <reference types="node" />
import { Stats } from 'fs';
import { Readable } from 'stream';
import { Quad } from 'rdf-js';
export declare const TYPE_PREDICATE: import("n3").NamedNode;
export declare const MODIFIED_PREDICATE: import("n3").NamedNode;
export declare const CONTAINS_PREDICATE: import("n3").NamedNode;
export declare const MTIME_PREDICATE: import("n3").NamedNode;
export declare const SIZE_PREDICATE: import("n3").NamedNode;
export declare const CONTAINER_OBJECT: import("n3").NamedNode;
export declare const BASIC_CONTAINER_OBJECT: import("n3").NamedNode;
export declare const RESOURCE_OBJECT: import("n3").NamedNode;
export declare const DATETIME_OBJECT: import("n3").NamedNode;
export declare class MetadataController {
    /**
     * Helper function to generate quads for a Container or Resource.
     * @param URI - The URI for which the quads should be generated.
     * @param stats - The Stats of the subject.
     *
     * @returns The generated quads.
     */
    generateResourceQuads(URI: string, stats: Stats): Quad[];
    /**
     * Helper function to generate the quad describing that the resource URI is a child of the container URI.
     * @param containerURI - The URI of the container.
     * @param childURI - The URI of the child resource.
     *
     * @returns The generated quad.
     */
    generateContainerContainsResourceQuad(containerURI: string, childURI: string): Quad;
    /**
     * Helper function to convert an array of quads into a Readable object.
     * @param quads - The array of quads.
     *
     * @returns The Readable object.
     */
    generateReadableFromQuads(quads: Quad[]): Readable;
    /**
     * Helper function to convert a Readable into an array of quads.
     * @param readable - The readable object.
     *
     * @returns A promise containing the array of quads.
     */
    generateQuadsFromReadable(readable: Readable): Promise<Quad[]>;
}
