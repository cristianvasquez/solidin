"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataController = exports.DATETIME_OBJECT = exports.RESOURCE_OBJECT = exports.BASIC_CONTAINER_OBJECT = exports.CONTAINER_OBJECT = exports.SIZE_PREDICATE = exports.MTIME_PREDICATE = exports.CONTAINS_PREDICATE = exports.MODIFIED_PREDICATE = exports.TYPE_PREDICATE = void 0;
const arrayify_stream_1 = __importDefault(require("arrayify-stream"));
const n3_1 = require("n3");
const streamify_array_1 = __importDefault(require("streamify-array"));
const ContentTypes_1 = require("../util/ContentTypes");
const Prefixes_1 = require("./Prefixes");
exports.TYPE_PREDICATE = n3_1.DataFactory.namedNode(`${Prefixes_1.RDF}type`);
exports.MODIFIED_PREDICATE = n3_1.DataFactory.namedNode(`${Prefixes_1.TERMS}modified`);
exports.CONTAINS_PREDICATE = n3_1.DataFactory.namedNode(`${Prefixes_1.LDP}contains`);
exports.MTIME_PREDICATE = n3_1.DataFactory.namedNode(`${Prefixes_1.STAT}mtime`);
exports.SIZE_PREDICATE = n3_1.DataFactory.namedNode(`${Prefixes_1.STAT}size`);
exports.CONTAINER_OBJECT = n3_1.DataFactory.namedNode(`${Prefixes_1.LDP}Container`);
exports.BASIC_CONTAINER_OBJECT = n3_1.DataFactory.namedNode(`${Prefixes_1.LDP}BasicContainer`);
exports.RESOURCE_OBJECT = n3_1.DataFactory.namedNode(`${Prefixes_1.LDP}Resource`);
exports.DATETIME_OBJECT = n3_1.DataFactory.namedNode(`${Prefixes_1.XML}dateTime`);
class MetadataController {
    /**
     * Helper function to generate quads for a Container or Resource.
     * @param URI - The URI for which the quads should be generated.
     * @param stats - The Stats of the subject.
     *
     * @returns The generated quads.
     */
    generateResourceQuads(URI, stats) {
        const subject = n3_1.DataFactory.namedNode(URI);
        const quads = [];
        if (stats.isDirectory()) {
            quads.push(n3_1.DataFactory.quad(subject, exports.TYPE_PREDICATE, exports.CONTAINER_OBJECT));
            quads.push(n3_1.DataFactory.quad(subject, exports.TYPE_PREDICATE, exports.BASIC_CONTAINER_OBJECT));
        }
        quads.push(n3_1.DataFactory.quad(subject, exports.TYPE_PREDICATE, exports.RESOURCE_OBJECT));
        quads.push(n3_1.DataFactory.quad(subject, exports.SIZE_PREDICATE, n3_1.DataFactory.literal(stats.size)));
        quads.push(n3_1.DataFactory.quad(subject, exports.MODIFIED_PREDICATE, n3_1.DataFactory.literal(stats.mtime.toUTCString(), exports.DATETIME_OBJECT)));
        quads.push(n3_1.DataFactory.quad(subject, exports.MTIME_PREDICATE, n3_1.DataFactory.literal(stats.mtime.getTime() / 100)));
        return quads;
    }
    /**
     * Helper function to generate the quad describing that the resource URI is a child of the container URI.
     * @param containerURI - The URI of the container.
     * @param childURI - The URI of the child resource.
     *
     * @returns The generated quad.
     */
    generateContainerContainsResourceQuad(containerURI, childURI) {
        return n3_1.DataFactory.quad(n3_1.DataFactory.namedNode(containerURI), exports.CONTAINS_PREDICATE, n3_1.DataFactory.namedNode(childURI));
    }
    /**
     * Helper function to convert an array of quads into a Readable object.
     * @param quads - The array of quads.
     *
     * @returns The Readable object.
     */
    generateReadableFromQuads(quads) {
        return streamify_array_1.default(quads).pipe(new n3_1.StreamWriter({ format: ContentTypes_1.TEXT_TURTLE }));
    }
    /**
     * Helper function to convert a Readable into an array of quads.
     * @param readable - The readable object.
     *
     * @returns A promise containing the array of quads.
     */
    async generateQuadsFromReadable(readable) {
        return arrayify_stream_1.default(readable.pipe(new n3_1.StreamParser({ format: ContentTypes_1.TEXT_TURTLE })));
    }
}
exports.MetadataController = MetadataController;
//# sourceMappingURL=MetadataController.js.map