"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressHttpServer = void 0;
const cors_1 = __importDefault(require("cors"));
const express_1 = __importDefault(require("express"));
class ExpressHttpServer {
    constructor(handler) {
        this.handler = handler;
    }
    listen(port) {
        const app = express_1.default();
        this.setup(app);
        return app.listen(port);
    }
    setup(app) {
        // Set up server identification
        app.use((request, response, done) => {
            response.setHeader('X-Powered-By', 'Community Solid Server');
            done();
        });
        // Set up Cross-Origin Resource Sharing (CORS)
        app.use(cors_1.default({
            // Based on https://github.com/solid/solid-spec/blob/master/recommendations-server.md#cors---cross-origin-resource-sharing
            // By default origin is always '*', this forces it to be the origin header if there is one
            origin: (origin, callback) => callback(null, (origin !== null && origin !== void 0 ? origin : '*')),
            methods: ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT', 'PATCH', 'DELETE'],
        }));
        // Delegate to the main handler
        app.use(async (request, response, done) => {
            try {
                await this.handler.handleSafe({ request, response });
            }
            catch (error) {
                const errMsg = `${error.name}: ${error.message}\n${error.stack}`;
                process.stderr.write(errMsg);
                response.status(500).contentType('text/plain').send(errMsg);
            }
            finally {
                done();
            }
        });
    }
}
exports.ExpressHttpServer = ExpressHttpServer;
//# sourceMappingURL=ExpressHttpServer.js.map